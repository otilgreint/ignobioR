)
# Test 1: Permissive with exclusion
mrfi_test1 <- ignorance_map_mod(
data_flor = floratus,
site = park,
excl_areas = unsuitablezone,
tau = 20,
cellsize = 2000
)
devtools::load_all(".")
# Test 1: Permissive with exclusion
mrfi_test1 <- ignorance_map_mod(
data_flor = floratus,
site = park,
excl_areas = unsuitablezone,
tau = 20,
cellsize = 2000,
use_edge_buffer = FALSE
)
devtools::load_all(".")
# Test 1: Permissive with exclusion
mrfi_test1 <- ignorance_map_mod(
data_flor = floratus,
site = park,
excl_areas = unsuitablezone,
tau = 20,
cellsize = 2000,
use_edge_buffer = FALSE
)
install.packages("renv")
library(renv)
devtools::load_all(".")
# Test 1: Permissive with exclusion
mrfi_test1 <- ignorance_map_mod(
data_flor = floratus,
site = park,
excl_areas = unsuitablezone,
tau = 20,
cellsize = 2000,
)
devtools::load_all(".")
vfl <- virtual_list_mod(
data_flor = floratus,
site = park_sf,
tau = 30,
upperlimit = 25
)
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 30,
upperlimit = 25
)
load("~/R projects/ignobioR/data/floratus.rda")
devtools::load_all(".")
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 30,
upperlimit = 25
)
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 30,
upperlimit = 10
)
devtools::load_all(".")
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 20,
upperlimit = 10
)
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 20,
upperlimit = 10,
use_parallel = FALSE # <--- Set this to FALSE
)
devtools::load_all(".")
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 20,
upperlimit = 10,
use_parallel = FALSE # <--- Set this to FALSE
)
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 20,
upperlimit = 10
)
devtools::load_all(".")
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 20,
upperlimit = 10
)
# 1. Load the future package (if not already loaded)
library(future)
# 2. **FORCE SEQUENTIAL PROCESSING**
# This instruction is executed BEFORE the function call.
# It tells the 'future' package to use the simple, stable, single-core plan.
future::plan(future::sequential)
print("Future plan set to sequential. Running stably on a single core.")
# 3. Call the function (without use_parallel argument)
# It will use the sequential plan set above.
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 20,
upperlimit = 10
)
devtools::load_all(".")
devtools::load_all(".")
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 20,
upperlimit = 10
)
devtools::load_all(".")
devtools::load_all(".")
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 20,
upperlimit = 10
)
library(terra)
ndvi_example <- rast("~/ndvi-msrm.tif")
usethis::use_data(ndvi_example, overwrite = TRUE)
ndvi_example
plot(ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
devtools::load_all(".")
mrfi <- ignorance_map_mod(
data_flor = floratus,
site = park,
tau = 20,
cellsize = 2000
)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
crs(ndvi_example)
crs(mrfi)
crs(mrfi) <- crs(ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi$MRFI,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi$MRFI,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi$MRFI,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi$MRFI,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi$MRFI,  # ← still the old CRS!
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproh,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproj,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproj,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 1000
)
devtools::load_all(".")
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproj,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
devtools::load_all(".")
devtools::load_all(".")
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproj,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
install.packages("spstat.explore")
install.packages("spatstat.explore")
library(spatstat.explore)
devtools::load_all(".")
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproj,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
devtools::load_all(".")
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproj,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
devtools::load_all(".")
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproj,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
devtools::load_all(".")
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproj,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
devtools::load_all(".")
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproj,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
install.packages("renv")
library(renv)
# Specify a CRAN snapshot date from 2022
renv::init(restart = TRUE, settings = list(snapshot.type = "all", cran.repos = "https://mran.microsoft.com/snapshot/2022-01-31"))
install.packages("renv")
library(renv)
# Specify a CRAN snapshot date from 2022
renv::init(restart = TRUE, settings = list(snapshot.type = "all", cran.repos = "https://mran.microsoft.com/snapshot/2022-01-31"))
library(renv)
renv::init(restart = TRUE, settings = list(snapshot.type = "all", cran.repos = "https://mran.microsoft.com/snapshot/2022-01-31"))
# Old (BROKEN): renv::init(restart = TRUE, settings = list(snapshot.type = "all", cran.repos = "https://mran.microsoft.com/snapshot/2022-01-31"))
# New (CORRECT): Use the Posit Public Package Manager (PPM) URL
# Note: R 4.1 is likely needed for spatial package compatibility with this date
renv::init(
restart = TRUE,
settings = list(
snapshot.type = "all",
cran.repos = "https://packagemanager.posit.co/cran/2022-01-31"
)
)
library(renv)
renv::init(
restart = TRUE,
settings = list(
snapshot.type = "all",
cran.repos = "https://packagemanager.posit.co/cran/2022-01-31"
)
)
# Option B: Try a later date (e.g., mid-2022)
renv::init(
restart = TRUE,
settings = list(
snapshot.type = "all",
cran.repos = "https://packagemanager.posit.co/cran/2022-06-01"
)
)
install.packages("remotes")
# 1. Install the 'checkpoint' package (if not already installed)
install.packages("checkpoint", repos = "https://cran.r-project.org")
# 2. Load the package
library(checkpoint)
# 3. Define the snapshot date
# This date is well within the R 4.1.2 window and before the major spatial package transitions.
snapshot_date <- "2021-12-01"
# 4. Use the checkpoint directory (ensure this path is accessible/writable)
checkpoint_dir <- file.path(getwd(), ".checkpoint_library_4.1.2")
# 5. Execute checkpoint() to set the local repository and library
# This step automatically creates an isolated library for the date specified.
# NOTE: This may take time as it downloads the archives and builds packages.
checkpoint(snapshot_date,
R_version = "4.1.2",
checkpointLocation = checkpoint_dir)
library(checkpoint)
snapshot_date <- "2021-12-01"
checkpoint_dir <- file.path(getwd(), ".checkpoint_library_4.1.2")
checkpoint(snapshot_date,
R_version = "4.1.2",
checkpointLocation = checkpoint_dir)
R.version.string
R.version.string
R.version.string
# 1. Define the project directory (which should be C:/Users/Giuseppe Antonelli/Documents/R projects/ignobioR)
project_root <- getwd()
# 2. Define the desired directory for the checkpoint files
# Note: checkpoint will automatically create the subfolders: .checkpoint/2021-12-01/lib/
checkpoint_dir <- file.path(project_root, "R_4.1.2_Checkpoint")
# 3. Re-run checkpoint() with the explicit R version and new location
# Note: You MUST be running R 4.1.2 for this to work correctly.
snapshot_date <- "2021-12-01"
checkpoint(snapshot_date,
R_version = "4.1.2",
checkpointLocation = checkpoint_dir)
library(checkpoint)
install.packages("checkpoint", repos = "https://cran.r-project.org")
# 2. Load the package
library(checkpoint)
# 3. Define the snapshot date
# This date is well within the R 4.1.2 window and before the major spatial package transitions.
snapshot_date <- "2021-12-01"
# 4. Use the checkpoint directory (ensure this path is accessible/writable)
checkpoint_dir <- file.path(getwd(), ".checkpoint_library_4.1.2")
# 5. Execute checkpoint() to set the local repository and library
# This step automatically creates an isolated library for the date specified.
# NOTE: This may take time as it downloads the archives and builds packages.
checkpoint(snapshot_date,
R_version = "4.1.2",
checkpointLocation = checkpoint_dir)
# 6. Install the core packages using the checkpointed repository:
packages_to_install <- c("rgdal", "raster", "sp", "rgeos", "GISTools",
"parallel", "doSNOW", "foreach", "gdalUtils",
"ggplot2", "grid", "gridExtra", "knitr", "utils")
# Use a specific repository mirror that hosts the archives
repo_url <- paste0("https://mran.microsoft.com/snapshot/", snapshot_date)
install.packages(packages_to_install,
repos = repo_url,
dependencies = TRUE)
# 1. Re-run checkpoint setup (This command sets the internal repository and lib paths)
project_root <- getwd()
checkpoint_dir <- file.path(project_root, "R_4.1.2_Checkpoint")
snapshot_date <- "2021-12-01"
# This command should output the correct 4.1.2 lib path:
checkpoint(snapshot_date,
R_version = "4.1.2",
checkpointLocation = checkpoint_dir)
# List of packages needed (excluding 'utils', 'parallel', 'grid' which are base R)
packages_to_install <- c("rgdal", "raster", "sp", "rgeos", "GISTools",
"doSNOW", "foreach", "gdalUtils",
"ggplot2", "gridExtra", "knitr")
# Install packages using the standard CRAN mirror.
# The checkpoint() function handles the redirection to the 2021-12-01 snapshot.
install.packages(packages_to_install,
dependencies = TRUE,
repos = "https://cloud.r-project.org")
.libPaths()
installed.packages()[c("rgdal", "raster", "rgeos", "ggplot2"), c("Version", "LibPath")]
lib_path <- .libPaths()[1]
message("Target library path for installation: ", lib_path)
rgdal_url <- https://cran.r-project.org/bin/windows/contrib/4.1/rgdal_1.6-6.zip
rgdal_url <- "https://cran.r-project.org/bin/windows/contrib/4.1/rgdal_1.6-6.zip"
install.packages(rgdal_url,
repos = NULL,        # Essential when installing from a direct URL
type = "win.binary", # Specifies it's a pre-compiled Windows binary
lib = lib_path)
rgeos_url <- "https://cran.r-project.org/bin/windows/contrib/4.1/rgeos_0.6-2.zip"
install.packages(rgeos_url,
repos = NULL,        # Essential when installing from a direct URL
type = "win.binary", # Specifies it's a pre-compiled Windows binary
lib = lib_path)
raster_url <- "https://cran.r-project.org/bin/windows/contrib/4.1/raster_3.6-20.zip"
install.packages(raster_url,
repos = NULL,        # Essential when installing from a direct URL
type = "win.binary", # Specifies it's a pre-compiled Windows binary
lib = lib_path)
# Install remaining packages
packages_remaining <- c("GISTools", "doSNOW", "foreach", "gdalUtils",
"ggplot2", "gridExtra", "knitr")
install.packages(packages_remaining,
dependencies = TRUE,
repos = "https://cloud.r-project.org")
installed.packages()[c("rgdal", "raster", "rgeos", "ggplot2"), c("Version", "LibPath")]
# And test loading the packages
library(rgdal)
library(raster)
library(rgeos)    # Critical spatial dependency
library(GISTools) # Used in the function
library(doSNOW)   # Used for parallel processing
library(foreach)  # Used for parallel processing
library(gdalUtils) # Used for gdal_rasterize
library(ggplot2)  # Used for plotting output
library(gridExtra) # Used for arranging tables
library(knitr)    # Used for table formatting
raster_url <- "https://cran.r-project.org/bin/windows/contrib/4.1/knitr_1.42.zip"
install.packages(raster_url,
repos = NULL,        # Essential when installing from a direct URL
type = "win.binary", # Specifies it's a pre-compiled Windows binary
lib = lib_path)
# A. Test loading
library(knitr)
# B. Verify version and path
installed.packages()["knitr", c("Version", "LibPath")]
ignorance_map
devtools::load_all(".")
raster_url <- "https://cran.r-project.org/bin/windows/contrib/4.1/devtools_2.4.5.zip"
install.packages(raster_url,
repos = NULL,        # Essential when installing from a direct URL
type = "win.binary", # Specifies it's a pre-compiled Windows binary
lib = lib_path)
devtools::load_all(".")
library(devtools)
devtools::load_all(".")
# Install the missing packages.
# They should be installed into your isolated 4.1.2 library.
install.packages(c("devtools", "usethis", "ellipsis"),
dependencies = TRUE,
repos = "https://cloud.r-project.org")
# Load devtools after installation
library(devtools)
install.packages(c("devtools", "usethis", "ellipsis"), dependencies = TRUE,
repos = "https://cloud.r-project.org")
source("~/R projects/ignobioR/R/ignorance_map.R", encoding = 'UTF-8', echo = TRUE)
mrfi <- ignorance_map(data_flor = floratus, excl_areas = unsuitablezone, site = park, tau = 20, cellsize = 2000)
load("~/R projects/ignobioR/data/floratus.rda")
load("~/R projects/ignobioR/data/park.rda")
load("~/R projects/ignobioR/data/unsuitablezone.rda")
mrfi <- ignorance_map(data_flor = floratus, excl_areas = unsuitablezone, site = park, tau = 20, cellsize = 2000)
# Load all packages used in the function's parallel section and main body
library(sp)
library(rgeos)
library(raster)
library(rgdal)
library(GISTools) # Used outside the loop, but good practice to load
library(parallel) # Used for makeCluster
library(doSNOW)   # Used for registering the cluster
library(foreach)  # Used for the %dopar% operator
# Use the example command for the extended test
mrfi <- ignorance_map(data_flor = floratus,
excl_areas = unsuitablezone,
site = park,
tau = 20,
cellsize = 2000)
